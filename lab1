///headers

#include <C:\opencv\build\include\opencv2\core\core.hpp>
#include <C:\opencv\build\include\opencv2\highgui\highgui.hpp>
#include <C:\opencv\build\include\opencv2\imgproc\imgproc.hpp>
#include <iostream>

///namespace

using namespace cv;
using namespace std;


///function+arguments

int main (int argc, char** argv)

{

///Original image

Mat src;
src = imread("road.png", 1);
imshow("src00", src);

///Grayscale image

Mat gray;
cvtColor(src, gray, CV_BGR2GRAY);
imshow ("gray", gray);


///Canny edge image

Mat edge, draw;
Canny( gray, edge, 100, 250,3);
edge.convertTo(draw, CV_8U);
imshow("canny", draw);

///invert image canny && distance transform

(draw.rows, draw.cols, CV_8U);
Mat CV_THRESH_INVERT,dist;
bitwise_not(draw, CV_THRESH_INVERT);
Mat(draw.rows, draw.cols, CV_32F);
distanceTransform (CV_THRESH_INVERT, dist, CV_DIST_L2, 3);
imshow("dist", dist);

///integral function (image)

Mat copy = dist.clone();
Mat igral,masksize;
double k = 0.9;
int maskSize = 6;
	
integral(src, igral);
Mat rlt(src.rows, src.cols, CV_8UC3);
for (int i = 1; i < src.rows-1; i++)
for (int j = 1; j < src.cols-1; j++)

{

maskSize = (int)(k * dist.at<float>(i, j));
int x1 = max(i - maskSize / 3, 1);
int y1 = max(j - maskSize / 3, 1);
int x2 = min(i + maskSize / 3, src.rows - 2);
int y2 = min(j + maskSize / 3, src.cols - 2);

if (x1 == x2 && y1 == y2) 
rlt.at<Vec3b>(i, j) = src.at<Vec3b>(i, j);
else 
rlt.at<Vec3b>(i, j) = (1.0 / ((x2 - x1 + 2) * (y2 - y1 + 2))) * (igral.at<Vec3i>(x2 + 2, y2 + 2) - 
igral.at<Vec3i>(x1, y2 + 2) - igral.at<Vec3i>(x2 + 2, y1) + igral.at<Vec3i>(x1, y1));

}

///output result

imshow("rlt000", rlt);		

///pressing at t = 0 & {please press any key}

waitKey(0);

/// back function

return 0;

}
